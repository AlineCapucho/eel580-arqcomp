<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
      <a name="width" val="32"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(200,420)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="mode_i"/>
    </comp>
    <comp lib="0" loc="(210,380)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="vecSize_i"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(270,210)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="A_i"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(270,310)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="B_i"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(870,340)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="S_o"/>
      <a name="output" val="true"/>
      <a name="width" val="32"/>
    </comp>
    <comp loc="(760,340)" name="SomadorVetorial">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(200,420)" to="(210,420)"/>
    <wire from="(210,380)" to="(540,380)"/>
    <wire from="(210,400)" to="(210,420)"/>
    <wire from="(210,400)" to="(540,400)"/>
    <wire from="(270,210)" to="(460,210)"/>
    <wire from="(270,310)" to="(430,310)"/>
    <wire from="(430,310)" to="(430,360)"/>
    <wire from="(430,360)" to="(540,360)"/>
    <wire from="(460,210)" to="(460,340)"/>
    <wire from="(460,340)" to="(540,340)"/>
    <wire from="(760,340)" to="(870,340)"/>
  </circuit>
  <vhdl name="SomadorVetorial">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY SomadorVetorial IS
	PORT (
		A_i        : IN std_logic_vector(31 downto 0);
		B_i        : IN std_logic_vector(31 downto 0);
		vecSize_i  : IN std_logic_vector(1 downto 0);
		mode_i	 : IN std_logic;
		S_o        : OUT std_logic_vector(31 downto 0)
	);
END SomadorVetorial;

ARCHITECTURE TypeArchitecture OF SomadorVetorial IS
	signal B     : std_logic_vector(31 downto 0);
	signal Carry : std_logic_vector(31 downto 0);
	signal Soma  : std_logic_vector(31 downto 0);

BEGIN
	INVERSORB: for i in 0 to 31 generate
		B(i)   &lt;= B_i(i) xor mode_i;
	end generate INVERSORB;

	Carry(0) &lt;= mode_i;

	GERARCARRY1: for i in 1 to 3 generate
		Carry(i) &lt;= (A_i(i-1) and B(i-1)) or ((A_i(i-1) xor B(i-1)) and Carry(i-1));
	end generate GERARCARRY1;

	Carry(4) &lt;= mode_i when (vecSize_i = "00") else
		(A_i(3) and B(3)) or ((A_i(3) xor B(3)) and Carry(3));

	GERARCARRY2: for i in 5 to 7 generate
		Carry(i) &lt;= (A_i(i-1) and B(i-1)) or ((A_i(i-1) xor B(i-1)) and Carry(i-1));
	end generate GERARCARRY2;

	Carry(8) &lt;= mode_i when (vecSize_i = "00" or vecSize_i = "01") ELSE
		(A_i(7) and B(7)) or ((A_i(7) xor B(7)) and Carry(7));

	GERARCARRY3: for i in 9 to 11 generate
		Carry(i) &lt;= (A_i(i-1) and B(i-1)) or ((A_i(i-1) xor B(i-1)) and Carry(i-1));
	end generate GERARCARRY3;

	Carry(12) &lt;= mode_i when (vecSize_i = "00") else
		(A_i(11) and B(11)) or ((A_i(11) xor B(11)) and Carry(11));

	GERARCARRY4: for i in 13 to 15 generate
		Carry(i) &lt;= (A_i(i-1) and B(i-1)) or ((A_i(i-1) xor B(i-1)) and Carry(i-1));
	end generate GERARCARRY4;

	Carry(16) &lt;= mode_i when (vecSize_i = "00" or vecSize_i = "01" or vecSize_i = "10") else
		(A_i(15) and B(15)) or ((A_i(15) xor B(15)) and Carry(15));

	GERARCARRY5: for i in 17 to 19 generate
		Carry(i) &lt;= (A_i(i-1) and B(i-1)) or ((A_i(i-1) xor B(i-1)) and Carry(i-1));
	end generate GERARCARRY5;

	Carry(20) &lt;= mode_i when (vecSize_i = "00") else
		(A_i(19) and B(19)) or ((A_i(19) xor B(19)) and Carry(19));

	GERARCARRY6: for i in 21 to 23 generate
		Carry(i) &lt;= (A_i(i-1) and B(i-1)) or ((A_i(i-1) xor B(i-1)) and Carry(i-1));
	end generate GERARCARRY6;

	Carry(24) &lt;= mode_i when (vecSize_i = "00" or vecSize_i = "01") else
		(A_i(23) and B(23)) or ((A_i(23) xor B(23)) and Carry(23));

	GERARCARRY7: for i in 25 to 27 generate
		Carry(i) &lt;= (A_i(i-1) and B(i-1)) or ((A_i(i-1) xor B(i-1)) and Carry(i-1));
	end generate GERARCARRY7;

	Carry(28) &lt;= mode_i when (vecSize_i = "00") else
		(A_i(27) and B(27)) or ((A_i(27) xor B(27)) and Carry(27));

	GERARCARRY8: for i in 29 to 31 generate
		Carry(i) &lt;= (A_i(i-1) and B(i-1)) or ((A_i(i-1) xor B(i-1)) and Carry(i-1));
	end generate GERARCARRY8;

	GERARSOMA: for i in 0 to 31 generate
		Soma(i) &lt;= A_i(i) xor B(i) xor Carry(i);
	end generate GERARSOMA;

	S_o &lt;= Soma;

END TypeArchitecture;
</vhdl>
</project>
